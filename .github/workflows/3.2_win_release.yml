env:
    SQLITESTUDIO_BRANCH: 3.2
    QT_VERSION: '5.14.2'
    QT_ARCH: 'win64_mingw73'
    MINGW_DIR: ${{ github.workspace }}/../Qt/Tools/mingw730_64
    PORTABLE_DIR: ${{ github.workspace }}/output/portable/SQLiteStudio
    MINGW_URL: https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_mingw/qt.tools.win64_mingw730/7.3.0-1x86_64-7.3.0-release-posix-seh-rt_v5-rev0.7z
    DEPS_URL: https://www.dropbox.com/s/9ulp1w82826966i/win64_deps.zip?dl=1

name: 3.2 branch Windows release build

on:
    # push:
        # branches:
            # - 3.2
    project:
        types: [deleted]

jobs:
    build:
        runs-on: windows-2019

        steps:
            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v1
              with:
                path: ${{ github.workspace }}\..\Qt
                key: ${{ runner.os }}-Qt-Cache
                
            - name: Install Qt
              uses: jurplel/install-qt-action@v2
              with:
                cached: ${{ steps.cache-qt.outputs.cache-hit }}
                version: ${{ env.QT_VERSION }}
                host: 'windows'
                arch: ${{ env.QT_ARCH }}
                dir: '${{ github.workspace }}\..'
                modules: 'qtscript'
                
            - name: Install mingw
              if: steps.cache-qt.outputs.cache-hit != 'true'
              shell: bash
              run: |
                curl -L ${{ env.MINGW_URL }} --output ../mingw.7z
                7z x -o"${{ github.workspace }}/../Qt" ../mingw.7z
                echo "::add-path::${{ env.MINGW_DIR }}/bin"
 
            - name: Clone repo
              uses: actions/checkout@v2
              with:
                ref: ${{ env.SQLITESTUDIO_BRANCH }}

            - name: Install dependencies
              shell: bash
              run: |
                curl -L ${{ env.DEPS_URL }} --output ../win64_deps.zip
                7z x -o".." ../win64_deps.zip
                echo "::add-path::${{ github.workspace }}/../lib"
 
            - name: Prepare output dir
              shell: bash
              run: mkdir output output/build output/build/Plugins
            
            - name: Compile SQLiteStudio3
              working-directory: output/build
              run: |
                qmake.exe CONFIG+=portable ..\..\SQLiteStudio3
                mingw32-make.exe -j 2
            
            - name: Compile Plugins
              working-directory: output/build/Plugins
              run: |
                qmake.exe CONFIG+=portable ..\..\..\Plugins
                mingw32-make.exe -j 2
              
            - name: Prepare portable dir
              shell: bash
              working-directory: output
              run: |
                mkdir portable
                cp -R SQLiteStudio portable/

            - name: Clean-up portable dir
              shell: bash
              working-directory: ${{ env.PORTABLE_DIR }}
              run: |
                rm -f *.a
                rm -f plugins/*.a

            - name: Prepare portable distro (Qt)
              shell: bash
              working-directory: ${{ env.Qt5_Dir }}
              run: |
                for f in Qt5Core Qt5Gui Qt5Network Qt5PrintSupport Qt5Script Qt5Svg Qt5Widgets Qt5Xml libgcc_s_seh-1 libstdc++-6 libwinpthread-1; do cp bin/$f.dll "${{ env.PORTABLE_DIR }}"; done
                cp bin/qt.conf "${{ env.PORTABLE_DIR }}"
                mkdir "${{ env.PORTABLE_DIR }}/iconengines"
                mkdir "${{ env.PORTABLE_DIR }}/platforms"
                mkdir "${{ env.PORTABLE_DIR }}/printsupport"
                mkdir "${{ env.PORTABLE_DIR }}/styles"
                mkdir "${{ env.PORTABLE_DIR }}/imageformats"
                cp plugins/iconengines/qsvgicon.dll "${{ env.PORTABLE_DIR }}/iconengines"
                cp plugins/platforms/qwindows.dll "${{ env.PORTABLE_DIR }}/platforms"
                cp plugins/styles/qwindowsvistastyle.dll "${{ env.PORTABLE_DIR }}/styles"
                cp plugins/printsupport/windowsprintersupport.dll "${{ env.PORTABLE_DIR }}/printsupport"
                for f in qgif qicns qico qjpeg qsvg qtga qtiff qwbmp; do cp plugins/imageformats/$f.dll "${{ env.PORTABLE_DIR }}/imageformats"; done

            - name: Prepare portable distro (Deps)
              shell: bash
              working-directory: ${{ github.workspace }}/../lib
              run: cp *.dll "${{ env.PORTABLE_DIR }}"

            - name: Determine SQLiteStudio version
              shell: bash
              working-directory: ${{ env.PORTABLE_DIR }}
              run: echo ::set-env name=SQLITESTUDIO_VERSION::$(./sqlitestudiocli.exe --version | cut -f 2 -d ' ')

            - name: Upload package artifact
              uses: actions/upload-artifact@v1
              with:
                name: sqlitestudio-${{ env.SQLITESTUDIO_VERSION }}
                path: output/portable
